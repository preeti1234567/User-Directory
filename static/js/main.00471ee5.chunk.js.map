{"version":3,"sources":["components/Wrapper.js","components/Dropdown.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","count","className","searchText","scope","result","map","employee","key","id","firstname","lastname","email","phone_no","preferred_language","Dropdown","name","onChange","changeHandlerCategory","categories","category","value","SearchBar","type","aria-label","aria-describedby","changeHandler","onClick","search","order","changeHandlerCategoryOrder","orderBy","changeHandlerOrderBy","App","useState","db","employees","setEmployees","setSearchText","setcategory","orderby","setorderby","orderbycategory","setorderbycategory","compareValues","a","b","hasOwnProperty","varA","toLowerCase","varB","comparison","getEmployeeData","filter","x","includes","event","target","sort","orderByResult","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.00471ee5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Wrapper = (props) => {\r\n  let count = 1;\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"card bg-light mt-3 mb-3\">\r\n        <div className=\"card-header\">Employee Search{props.searchText ? ' for ' + props.searchText : ''}</div>\r\n      </div>\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr className=\"thead-light\">\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">First Name</th>\r\n            <th scope=\"col\">Last Name</th>\r\n            <th scope=\"col\">Email</th>\r\n            <th scope=\"col\">Phone No</th>\r\n            <th scope=\"col\">Preferred Language</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.result.map((employee) => {\r\n            return (\r\n              <tr key={employee.id}>\r\n                <th scope=\"row\">{count++}</th>\r\n                <td>{employee.firstname}</td>\r\n                <td>{employee.lastname}</td>\r\n                <td>{employee.email}</td>\r\n                <td>{employee.phone_no}</td>\r\n                <td>{employee.preferred_language}</td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\n\r\nconst Dropdown = (props) => {\r\n  return (\r\n    <select id=\"category\" name=\"category\" onChange={props.changeHandlerCategory}>\r\n      {props.categories.map(category => <option key={category} value={category}>{category}</option>)}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default Dropdown;\r\n","import React from \"react\";\r\nimport  Dropdown  from './Dropdown';\r\n\r\n const SearchBar = (props) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"input-group-prepend\">\r\n        <Dropdown categories={props.categories} changeHandlerCategory={props.changeHandlerCategory}/>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          aria-label=\"Default\"\r\n          aria-describedby=\"inputGroup-sizing-default\"\r\n          onChange={props.changeHandler}\r\n        ></input>\r\n        <button className =\"btn btn-secondary\" onClick={props.search}>Search</button>\r\n        <div className = \"container\">\r\n        <button className =\"btn btn-secondary\" onClick={props.order}>Order By</button>\r\n        <Dropdown categories={props.categories} changeHandlerCategory={props.changeHandlerCategoryOrder}/>\r\n        <Dropdown categories={props.orderBy} changeHandlerCategory={props.changeHandlerOrderBy}/>\r\n        \r\n        </div>\r\n        \r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, { useState } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport SearchBar from \"./components/SearchBar\";\nimport db from \"./employee.json\";\nimport \"./App.css\";\nconst App = (props) => {\n  const [employees, setEmployees] = useState(db);\n  const [searchText,setSearchText] = useState('');\n  const [category,setcategory] = useState('First Name');\n  const [orderby,setorderby] = useState('asc');\n  const [orderbycategory,setorderbycategory] = useState('First Name');\n\n  const categories = ['First Name','Last Name','Email','Perfered Language'];\n  const orderBy = ['asc','desc'];\n  const order = (event) => {    \n    const result = getEmployeeData();\n    const orderByResult = () => {\n      switch(orderbycategory)\n      {\n        case 'Last Name':\n          return result.sort(compareValues('lastname',orderby));\n        case 'Email':\n          return result.sort(compareValues('email',orderby));\n        case 'Perfered Language':\n          return result.sort(compareValues('preferred_language',orderby));\n        case 'First Name':\n        default:\n          return result.sort(compareValues('firstname',orderby));\n      }\n    }\n    setEmployees(orderByResult());\n  };\n\n  function compareValues(key, order = 'asc') {\n    return function innerSort(a, b) {\n      if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n        // property doesn't exist on either object\n        return 0;\n      }\n  \n      const varA = (typeof a[key] === 'string')\n        ? a[key].toLowerCase() : a[key];\n      const varB = (typeof b[key] === 'string')\n        ? b[key].toLowerCase() : b[key];\n  \n      let comparison = 0;\n      if (varA > varB) {\n        comparison = 1;\n      } else if (varA < varB) {\n        comparison = -1;\n      }\n      return (\n        (order === 'desc') ? (comparison * -1) : comparison\n      );\n    };\n  }\n  \n\n  const changeHandler = (event) =>\n  {    \n    setSearchText(event.target.value.toLowerCase())\n  }\n  const changeHandlerCategory = (event) =>\n  {    \n     setcategory(event.target.value);\n  }\n\n  const changeHandlerCategoryOrder = (event) =>\n  {\n    setorderbycategory(event.target.value);\n  }\n\n  const changeHandlerOrderBy = (event) =>\n  {\n    setorderby(event.target.value);\n  }\n  \n  const searchClickHandler = (event) => {    \n    setEmployees(getEmployeeData());\n  };\n\n  const getEmployeeData = () =>\n  {\n      switch(category)\n      {\n        case 'First Name':\n          return db.filter(x=> x.firstname && x.firstname.toLowerCase().includes(searchText));\n        case 'Last Name':\n          return db.filter(x=> x.lastname && x.lastname.toLowerCase().includes(searchText));\n        case 'Email':\n          return db.filter(x=> x.email && x.email.toLowerCase().includes(searchText));\n        case 'Perfered Language':\n          return db.filter(x=> x.preferred_language && x.preferred_language.toLowerCase().includes(searchText));\n        default:\n          return db;\n      }     \n  }\n\n  const content = (\n    <div className=\"App\">\n      <div className=\"card text-white bg-primary mb-3\">\n        <h1 className=\"App-title\">Employee Directory</h1>\n      </div>\n      <SearchBar search={searchClickHandler} changeHandler={changeHandler} categories={categories} changeHandlerCategory={changeHandlerCategory} changeHandlerOrderBy={changeHandlerOrderBy} changeHandlerCategoryOrder={changeHandlerCategoryOrder} order={order} orderBy={orderBy}/>\n      <Wrapper searchText={searchText} result={employees} />\n    </div>\n  );\n  return content;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}